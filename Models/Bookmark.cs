using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Security.Policy;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace reffffound.Models
{
	public class Bookmark
	{
		[Description( "Do not post, autogenerated." )]
		public int Id { get; set; }
		[Description( "Do not post, autogenerated." )]
		public string Guid { get; set; }
		public string Url { get; set; }
		public string Title { get; set; }
		public string Image { get; set; }
		public int Savedby { get; set; }
		public string Timestamp { get; set; }
		[Description( "Do not post, autogenerated." )]

		public string Context1link { get; set; }
		[Description( "Do not post, autogenerated." )]
		public string Context1img { get; set; }
		[Description( "Do not post, autogenerated." )]
		public string Context2link { get; set; }
		[Description( "Do not post, autogenerated." )]
		public string Context2img { get; set; }
		[Description( "Do not post, autogenerated." )]
		public string Context3link { get; set; }
		[Description( "Do not post, autogenerated." )]
		public string Context3img { get; set; }
		[Description( "Do not post, autogenerated." )]
		public string Usercontext { get; set; }

		[Description( "Deprecated" )]
		public string FullUrl { get; set; }

		[Description( "Only temporary Property, not being saved persistent to the Database." )]
		public string Username { get; set; }

		public override string ToString()
		{
			return Id + ", " + Guid + ", " + Url + ", " + Title + ", " + Image + ", " + Timestamp + ", " + Savedby +
					 ", " + Usercontext + ", " + FullUrl
					 + ", " + Context1link + ", " + Context1img + ", " + Context2img + ", " + Context2link + ", " +
					 Context3img + ", " + Context3link;
		}

		public Bookmark CreateFrom(IFormCollection collection)
		{
			var bookmark = new Bookmark( );

			var url = collection["Url"][0] ?? "";
			var title = collection["Title"][0] ?? "";
			var image = collection["Image"][0] ?? "";
			var usercontext = collection["Usercontext"][0] ?? "";
			var username = usercontext;

			bookmark.Url = url;
			if (!string.IsNullOrWhiteSpace( bookmark.Url ) && string.IsNullOrWhiteSpace( title ))
			{
				title = GetTitleFromUrl( bookmark.Url );
			}
			bookmark.Title = title;
			bookmark.Image = image;
			bookmark.Usercontext = usercontext;
			bookmark.Username = username;
			bookmark.Savedby = 1;

			bookmark.Guid = System.Guid.NewGuid( ).ToString( );
			bookmark.Timestamp = DateTime.Now.ToString( "yyyy-MM-dd HH:mm:ss" );

			bookmark.Context1img = bookmark.Context1link =
			bookmark.Context2img = bookmark.Context2link =
			bookmark.Context3img = bookmark.Context3link =
			bookmark.FullUrl = "";

			return bookmark;
		}

		public void UpdateFrom(IFormCollection collection)
		{
			var url = collection["Url"][0];
			var title = collection["Title"][0];
			var image = collection["Image"][0];

			if (!string.IsNullOrEmpty( url ) && !this.Url.Equals( url ))
			{
				Url = url;
			}
			if (!string.IsNullOrEmpty( title ) && !this.Title.Equals( title ))
			{
				Title = title;
			}
			if (!string.IsNullOrEmpty( image ) && !this.Image.Equals( image ))
			{
				Image = image;
			}
		}

		private string GetTitleFromUrl(string url)
		{
			string titlepart = "";
			var partsplits = url.Split( '/' );
			var lastPart = partsplits[partsplits.Length - 1];
			if (lastPart.Contains( "?" ))
			{
				var sitesplits = lastPart.Split( "?" );
				lastPart = sitesplits[0];
			}

			if (lastPart.Contains( "#" ))
			{
				var segmentsplits = lastPart.Split( "#" );
				lastPart = segmentsplits[0];
			}

			titlepart = lastPart;

			var site_urltext = titlepart.Replace( "_", " " ).Replace( "-", " " ).Trim( );
			var site_domaintext = "";

			var domainsplit = url.Split( "www." )?[1].Split( "." )?[0];
			if (!string.IsNullOrWhiteSpace( domainsplit ))
			{
				site_domaintext = domainsplit + " - ";
			}

			string titletext = site_domaintext + site_urltext;

			return titletext;
		}

		/// <summary>
		/// Checks if current Data state is valid to Create or Update a bookmark
		/// Provides a message to the frontend in case something is invalid.
		/// </summary>
		/// <returns></returns>
		public bool IsValid(out string validationMessage)
		{
			bool isValid = true;
			validationMessage = string.Empty;

			if (string.IsNullOrWhiteSpace( Url ))
			{
				validationMessage = "Please provide an Url to link your bookmark to.";
				isValid = false;
			}
			if (string.IsNullOrWhiteSpace( Title ))
			{
				validationMessage = "Please provide a Title for your Bookmark.";
				isValid = false;
			}
			if (Title.Length > 256)
			{
				validationMessage = "Please shorten your title to maximum 256 charaters.";
				isValid = false;
			}
			if (string.IsNullOrWhiteSpace( Image ))
			{
				validationMessage = "Please provide link to your bookmarked Image.";
				isValid = false;
			}

			return isValid;
		}

		public void SetUsername()
		{
			if (!string.IsNullOrWhiteSpace( Usercontext ))
			{
				var userscontexts = Usercontext.Replace( " ", "" ).Split( ',' );
				if (userscontexts.Any( ))
				{
					string username = userscontexts[0].ToString( );
					if (!string.IsNullOrWhiteSpace( username ))
					{
						this.Username = username;
					}
				}
			}
		}

		public bool DataEquals(Bookmark bookmark)
		{
			if(bookmark == null) return false;
			if(bookmark.Guid != this.Guid) return false;
			if(bookmark.Url != this.Url) return false;
			if(bookmark.Title != this.Title) return false;
			if(bookmark.Image != this.Image) return false;
			if(bookmark.Savedby != this.Savedby) return false;
			if(bookmark.Timestamp != this.Timestamp) return false;

			return true;
		}
	}
}
